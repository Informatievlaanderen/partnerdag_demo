PREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>
PREFIX schema:          <https://schema.org/>
PREFIX time:            <http://www.w3.org/2006/time#>
PREFIX sosa:            <http://www.w3.org/ns/sosa/>
PREFIX ssn:             <http://www.w3.org/ns/ssn/>
PREFIX skos:            <http://www.w3.org/2004/02/skos/core#>
PREFIX dct:             <http://purl.org/dc/terms/>
PREFIX iso19156-ob:     <http://def.isotc211.org/iso19156/2011/Observation#>
PREFIX iso19156-sp:     <http://def.isotc211.org/iso19156/2011/SamplingPoint#>
PREFIX iso19103-mp:     <http://def.isotc211.org/iso19103/2015/MeasureTypes#>
PREFIX sf:              <http://www.opengis.net/ont/sf#>
PREFIX geo:             <http://www.opengis.net/ont/geosparql#>
PREFIX locn:            <http://www.w3.org/ns/locn#>
PREFIX cdt:             <https://w3id.org/cdt/>
PREFIX tree:            <https://w3id.org/tree#>
PREFIX geoc:            <https://opengis.net/def/function/geosparql/custom#>

PREFIX traffic:         <https://telraam.net/ns/traffic#>
PREFIX :                <https://data.vlaanderen.be/ns/verkeersmetingen#>
PREFIX impl:            <https://implementatie.data.vlaanderen.be/ns/vsds-verkeersmetingen#>

PREFIX cl-vrt:          <https://data.vlaanderen.be/doc/concept/VkmVoertuigType/>
PREFIX cl-vkt:          <https://data.vlaanderen.be/doc/concept/VkmVerkeersKenmerkType/>
PREFIX cl-mit:          <https://data.vlaanderen.be/doc/concept/VkmMeetInstrumentType/>
PREFIX cl-op:           <https://data.vlaanderen.be/doc/concept/VkmObservatieProcedure/>
PREFIX cl-trt:          <https://inspire.ec.europa.eu/codelist/LinkDirectionValue/>
PREFIX dv-om:           <https://data.vlaanderen.be/ns/observaties-en-metingen/#>
PREFIX dv-weg:          <https://data.vlaanderen.be/ns/weg#>
PREFIX dv-netwerk:      <https://data.vlaanderen.be/ns/netwerk#>

CONSTRUCT {
  ?interval 
    a time:TemporalEntity ;
    time:hasBeginning [ a time:Instant ; time:inXSDDateTimeStamp ?timestamp ] ;
    time:hasXSDDuration ?duration .

  ?featureOfInterest
    a :Verkeersmeetpunt ;
    :bemonsterdObject [ 
      a dv-weg:Rijrichting ;
      dv-weg:rijrichting cl-trt:inDirection ;
      impl:Rijrichting.netwerkreferentieelement  [ 
          a dv-weg:Wegsegment ;
          dv-netwerk:Link.geometriemiddellijn [ 
            rdf:type ?geometryType ; 
            geo:asWKT ?wktLiteral 
          ] ;
          dv-netwerk:beginknoop [ 
            a dv-netwerk:Knoop ;
            dv-netwerk:Knoop.geometrie [ a sf:Point ; geo:asWKT ?startNode ]
          ] ;
          dv-netwerk:eindknoop [
            a dv-netwerk:Knoop ;
            dv-netwerk:Knoop.geometrie [ a sf:Point ; geo:asWKT ?endNode ]
          ]
      ]
    ] ;
    impl:Verkeersmeetpunt.verkeersmeetpuntnetwerkreferentie [ 
      a dv-netwerk:Puntreferentie ;
      dv-netwerk:Puntreferentie.opPositie [ a iso19103-mp:Length ; schema:unitCode "m"^^cdt:ucumunit ; schema:value ?halfLength ]
    ] ;
    iso19156-sp:SF_SamplingPoint.shape [ a sf:Point ; geo:asWKT ?midPoint ] .

  ?sensor 
    a sosa:Sensor ;
    dct:type cl-mit:telraam .

GRAPH ?bikeCount {
  ?bikeCount 
    rdf:type :Verkeersmeting, impl:Verkeerstelling;
    iso19156-ob:OM_Observation.phenomenonTime ?interval ;
    impl:Verkeerstelling.tellingresultaat ?bike ;
    impl:Verkeerstelling.geobserveerdKenmerk [ a impl:Verkeerstellingkenmerk ; impl:Verkeerstellingkenmerk.kenmerktype cl-vkt:aantal; :voertuigType cl-vrt:fiets ] ;
    :geobserveerdObject ?featureOfInterest ;
    sosa:madeBySensor ?sensor .
}

GRAPH ?carCount {
  ?carCount 
    rdf:type :Verkeersmeting, impl:Verkeerstelling;
    iso19156-ob:OM_Observation.phenomenonTime ?interval ;
    impl:Verkeerstelling.tellingresultaat ?car ;
    impl:Verkeerstelling.geobserveerdKenmerk [ a impl:Verkeerstellingkenmerk ; impl:Verkeerstellingkenmerk.kenmerktype cl-vkt:aantal; :voertuigType cl-vrt:auto ] ;
    :geobserveerdObject ?featureOfInterest ;
    sosa:madeBySensor ?sensor .
}

GRAPH ?heavyCount {
  ?heavyCount 
    rdf:type :Verkeersmeting, impl:Verkeerstelling ;
    iso19156-ob:OM_Observation.phenomenonTime ?interval ;
    impl:Verkeerstelling.tellingresultaat ?heavy ;
    impl:Verkeerstelling.geobserveerdKenmerk [ a impl:Verkeerstellingkenmerk ; impl:Verkeerstellingkenmerk.kenmerktype cl-vkt:aantal; :voertuigType cl-vrt:vrachtwagen ] ;
    :geobserveerdObject ?featureOfInterest ;
    sosa:madeBySensor ?sensor .
}

GRAPH ?pedestrianCount {
  ?pedestrianCount 
    rdf:type :Verkeersmeting, impl:Verkeerstelling;
    iso19156-ob:OM_Observation.phenomenonTime ?interval ;
    impl:Verkeerstelling.tellingresultaat ?pedestrian ;
    impl:Verkeerstelling.geobserveerdKenmerk [ a impl:Verkeerstellingkenmerk ; impl:Verkeerstellingkenmerk.kenmerktype cl-vkt:aantal; :voertuigType cl-vrt:voetganger ] ;
    :geobserveerdObject ?featureOfInterest ;
    sosa:madeBySensor ?sensor .
}

GRAPH ?carSpeed {
  ?carSpeed 
    rdf:type :Verkeersmeting, impl:Verkeerssnelheidsmeting ;
    iso19156-ob:OM_Observation.phenomenonTime ?interval ;
    iso19156-ob:OM_Observation.result [ a iso19103-mp:Speed ; schema:unitCode "km/h"^^cdt:ucumunit ; schema:value ?v85 ] ;
    impl:Verkeerssnelheidsmeting.geobserveerdKenmerk [ a impl:Verkeerssnelheidsmetingkenmerk ; impl:Verkeerssnelheidsmetingkenmerk.kenmerktype cl-vkt:V85; :voertuigType cl-vrt:auto ] ;
    :geobserveerdObject ?featureOfInterest ;
    sosa:madeBySensor ?sensor .
}

} WHERE {

  ?subject rdf:type traffic:Observation .
  
  OPTIONAL { filter(bound(?bike)) 
    ?subject traffic:bike ?bike . 
    bind(uri(concat(str(?subject), "#bike")) as ?bikeCount) .
  }

  OPTIONAL { filter(bound(?car)) 
    ?subject traffic:car ?car . 
    bind(uri(concat(str(?subject), "#car")) as ?carCount) .
  }
  
  OPTIONAL { filter(bound(?heavy)) 
    ?subject traffic:heavy ?heavy . 
    bind(uri(concat(str(?subject), "#heavy")) as ?heavyCount) .
  }
  
  OPTIONAL { filter(bound(?pedestrian)) 
    ?subject traffic:pedestrian ?pedestrian . 
    bind(uri(concat(str(?subject), "#pedestrian")) as ?pedestrianCount) .
  }
  
  OPTIONAL { filter(bound(?v85)) 
    ?subject traffic:v85 ?v85 . 
    bind(uri(concat(str(?subject), "#v85")) as ?carSpeed) .
  }

  ?subject traffic:timestamp ?timestamp .
  ?subject traffic:duration ?duration . 
  ?subject locn:geometry ?geometry .

  ?geometry rdf:type ?geometryType .
  ?geometry geo:asWKT ?wktLiteral .

  bind(geoc:lineAtIndex(?wktLiteral, 0) as ?line) .
  bind(geoc:firstCoordinate(?line) as ?startNode) .
  bind(geoc:lastCoordinate(?line) as ?endNode) .
  bind(geoc:midPoint(?line) as ?midPoint) .
  bind(geoc:lineLength(?line)/2 as ?halfLength) .

  OPTIONAL { filter(bound(?bikeCount) || bound(?carCount) || bound(?heavyCount) || bound(?pedestrianCount) || bound(?carSpeed))
    bind(bnode() as ?interval) .
    bind(bnode() as ?featureOfInterest) .
    bind(bnode() as ?sensor) .
  }
}
